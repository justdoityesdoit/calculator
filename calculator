<!DOCTYPE html>
<head>
  <meta charset="utf-8">
  <title>계산기</title>
  <style>
    * { box-sizing: border-box }
    #result { width: 180px; height: 50px; margin: 5px; text-align: right }
    #operator { width: 50px; height: 50px; margin: 5px; text-align: center }
    button { width: 50px; height: 50px; margin: 5px }
  </style>
</head>

<!-- 계산기 버튼 구현 -->
<body>
  <input readonly id="operator">
  <input readonly type="number" id="result">
  <div class="row">
    <button id="num-7">7</button>
    <button id="num-8">8</button>
    <button id="num-9">9</button>
    <button id="plus">+</button>
  </div>
  <div class="row">
    <button id="num-4">4</button>
    <button id="num-5">5</button>
    <button id="num-6">6</button>
    <button id="minus">-</button>
  </div>
  <div class="row">
    <button id="num-1">1</button>
    <button id="num-2">2</button>
    <button id="num-3">3</button>
    <button id="divide">/</button>
  </div>
  <div class="row">
    <button id="clear">C</button>
    <button id="num-0">0</button>
    <button id="calculate">=</button>
    <button id="multiply">x</button>
  </div>
<script>
    let numOne = '';
    let operator = '';
    let numTwo = '';
    const $operator = document.querySelector('#operator');
    const $result = document.querySelector('#result');

    const onClickNumber = (event) => {
        if (!operator) {
          numOne += event.target.textContent;
          $result.value += event.target.textContent;
          return;
        }
          
        if (!numTwo) {
            $result.value = '';
          }
          numTwo += event.target.textContent;
          $result.value += event.target.textContent;
        };
        //고차 함수. high order function (함수가 함수를 리턴하여, 중복되는 함수제거)

  document.querySelector('#num-0').addEventListener('click', onClickNumber);
  document.querySelector('#num-1').addEventListener('click', onClickNumber);
  document.querySelector('#num-2').addEventListener('click', onClickNumber);
  document.querySelector('#num-3').addEventListener('click', onClickNumber);
  document.querySelector('#num-4').addEventListener('click', onClickNumber);
  document.querySelector('#num-5').addEventListener('click', onClickNumber);
  document.querySelector('#num-6').addEventListener('click', onClickNumber);
  document.querySelector('#num-7').addEventListener('click', onClickNumber);
  document.querySelector('#num-8').addEventListener('click', onClickNumber);
  document.querySelector('#num-9').addEventListener('click', onClickNumber);

  const onClickOperator = (op) => () => {
    if (numOne) {
      operator = op;
      $operator.value = op;
    } else {
      alert('insert numbers first');
    }
  }

  document.querySelector('#plus').addEventListener('click', onClickOperator('+'));
  document.querySelector('#minus').addEventListener('click', onClickOperator('-'));
  document.querySelector('#divide').addEventListener('click', onClickOperator('/'));
  document.querySelector('#multiply').addEventListener('click', onClickOperator('*'));
  document.querySelector('#calculate').addEventListener('click', () => {
    if (numTwo) {
      switch (operator) {
        case '+':
          $result.value = parseInt(numOne) + parseInt(numTwo);
          break;
        case '-':
          $result.value = numOne - numTwo;
          break;
        case '*':
          $result.value = numOne * numTwo;
          break;
        case '/':
          $result.value = numOne / numTwo;
          break;
        default:
          break;
      }
    } else {
      alert('insert numbers first');
    }
  });

  document.querySelector('#clear').addEventListener('click', () => {
    numOne = '';
    operator = '';
    numTwo = '';
    $operator.value = '';
    $result.value = '';
  });
</script>
</body>


Explain of GPT

This code is a basic calculator that allows users to input two numbers and 
perform simple arithmetic operations such as addition, subtraction, multiplication, 
and division.

The first three lines declare three variables, numOne, operator, and numTwo, 
and initialize them with empty string values. These variables will be used to 
store the user's input.

The next two lines declare two constants, $operator and $result, and assign them 
to the HTML elements with the IDs operator and result, respectively. These constants 
are used to update the display of the calculator.

The onClickNumber function handles the event when a user clicks on a number button. 
It takes an event object as a parameter. The function first checks if an operator 
has been selected yet. If an operator has not been selected, the clicked number is added 
to numOne and displayed in $result. Otherwise, if numTwo is not yet defined, the display 
is cleared and the clicked number is added to numTwo.

The next ten lines add event listeners to each of the number buttons on the calculator. 
They all call the onClickNumber function when clicked.

The onClickOperator function is a higher-order function that returns
